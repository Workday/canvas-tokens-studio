name: Pull Request Check

on: pull_request

jobs:
  get-baseline:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.base.ref }}

      - name: Set tokens artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tokens
          path: tokens/

  pr-content:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PR title and changed files
        run: |
          # Use branch names instead of commit SHAs to get changed files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.ref }}...${{ github.event.pull_request.head.ref }})
          # Check if any file in tokens/ is changed
          TOKENS_CHANGED=false
          for file in $CHANGED_FILES; do
            if [[ "$file" == tokens/* ]]; then
              TOKENS_CHANGED=true
              break
            fi
          done

          # Get PR title
          PR_TITLE="${{ github.event.pull_request.title }}"

          # If tokens changed, PR title must start with feat
          if [ "$TOKENS_CHANGED" = true ]; then
            if [[ ! "$PR_TITLE" =~ ^feat ]]; then
              echo "Error: Changes to 'tokens/' must be in a PR with a title starting with 'feat'"
              exit 1
            fi
          else
            # Otherwise, check for conventional commit pattern in PR title
            if [[ ! "$PR_TITLE" =~ ^(feat|fix|chore|docs|style|refactor|perf|test|build|ci|ops|revert|merge)(\([^\)]+\))?:\  ]]; then
              echo "Error: PR title does not follow Conventional Commits format."
              exit 1
            fi
          fi

      - name: Check PR body
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
          # Check if PR body is empty
          if [ -z "$PR_BODY" ]; then
            echo "Error: PR body is empty"
            exit 1
          fi

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22.x
          registry-url: https://registry.npmjs.org

      - name: Install Dependencies
        run: yarn install --production=false

      - name: Parse tokens
        run: node utils/parser.js
        env:
          CHANGED: all

  visual-regression:
    runs-on: ubuntu-latest
    needs: get-baseline
    steps:
      - uses: actions/checkout@v4

      - name: Get tokens
        uses: actions/download-artifact@v4
        with:
          name: tokens
          path: tokens-base/

      - name: Extract cache report file
        uses: actions/cache/restore@v4
        with:
          path: visual-report.md
          key: visual-report-${{ github.event.pull_request.head.ref }}
          restore-keys: |
            visual-report-${{ github.event.pull_request.head.ref }}

      - name: Run visual report and capture Markdown
        id: visual_report
        run: |
          REPORT_OUTPUT="$(node utils/visual-report.js)"
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$REPORT_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create visual report file
        run: |
          echo "$REPORT_OUTPUT" > visual-report.md

      - name: Cache visual report file
        uses: actions/cache/save@v4
        with:
          path: visual-report.md
          key: visual-report-${{ github.event.pull_request.head.ref }}

      - name: Comment PR with Markdown report
        if: steps.visual_report.outputs.content != ''
        uses: thollander/actions-comment-pull-request@v1
        with:
          message: ${{ steps.visual_report.outputs.content }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
